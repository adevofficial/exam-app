{"version":3,"sources":["components/PricingBox.js","pages/PricingTable.js","App.js","serviceWorker.js","index.js"],"names":["PricingBox","lineBreaker","text","split","map","lineText","react_default","a","createElement","_this$props","this","props","item","type","className","classnames","py-3","pt-3","style","minHeight","name","rateTitle","details","Fragment","borderRadius","borderBottomRightRadius","borderBottomLeftRadius","background","Component","defaultProps","PricingTable","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSwitch","base_name","e","setState","baseSwitch","state","baseItems","basis_data","baseHead","onClick","active","i","PricingBox_PricingBox","key","website_data","website","App","PricingTable_PricingTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80c3bfcc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport classnames from \"classnames\";\n\nexport default class PricingBox extends Component {\n  static defaultProps = {\n    type: \"base\"\n  };\n\n  lineBreaker = text => text.split(\"\\n\").map(lineText => <div>{lineText}</div>);\n\n  render() {\n    const { item, type } = this.props;\n\n    return (\n      <div className=\"col-12 col-lg-3 col-md-4 px-0\">\n        <div\n          className={classnames(\n            { \"py-3\": type == \"base\" },\n            { \"pt-3\": type == \"website\" },\n            \"princing-table-item\",\n            \"m-3\",\n            \"rounded-border\",\n            \"shadow\",\n            \"text-center\"\n          )}\n        >\n          <h6 style={{ minHeight: \"40px\" }} className=\"text-uppercase mb-3\">\n            {this.lineBreaker(item.name)}\n          </h6>\n          {type == \"base\" && (\n            <div className=\"rate-title py-3 mb-3 font-weight-bold bg-white\">\n              {this.lineBreaker(item.rateTitle)}\n            </div>\n          )}\n          <div className=\"details mb-3\">{this.lineBreaker(item.details)}</div>\n\n          {type == \"website\" ? (\n            <>\n              <div className=\"mx-3 text-right\">\n                <button\n                  style={{ borderRadius: \"2rem\" }}\n                  className=\"start-item  btn btn-light px-4\"\n                >\n                  View\n                </button>\n              </div>\n              <div\n                style={{\n                  borderBottomRightRadius: \"7px\",\n                  borderBottomLeftRadius: \"7px\",\n                  background: \"rgba(255,255,255,.4)\"\n                }}\n                className=\"rate-title py-2 m-2 font-weight-bold\"\n              >\n                {item.rateTitle}\n              </div>\n            </>\n          ) : (\n            <div className=\"mx-3\">\n              <button\n                style={{ borderRadius: \"2rem\" }}\n                className=\"start-item font-weight-bold  btn btn-light bg-white w-100\"\n              >\n                START\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport PricingBox from \"./../components/PricingBox\";\nimport basis_data from \"./../database_moc/basis_data\";\nimport website_data from \"./../database_moc/website_data\";\n\nexport default class PricingTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      baseSwitch: \"user\"\n    };\n  }\n\n  handleSwitch = base_name => e => {\n    this.setState({ baseSwitch: base_name });\n  };\n\n  render() {\n    const baseItems = basis_data[this.state.baseSwitch][\"items\"];\n    const baseHead = basis_data[this.state.baseSwitch][\"heading\"];\n    return (\n      <div className=\"container pt-2\">\n        <div className=\"p-3 px-4 h4 mb-3 bg-white border rounded-border shadow-sm\">\n          Test Packages\n        </div>\n        <div className=\"text-center mb-3\">\n          <div className=\"switch-container\">\n            <button\n              onClick={this.handleSwitch(\"user\")}\n              className={classnames({\n                active: this.state.baseSwitch === \"user\"\n              })}\n            >\n              User Base\n            </button>\n            <button\n              onClick={this.handleSwitch(\"test\")}\n              className={classnames({\n                active: this.state.baseSwitch === \"test\"\n              })}\n            >\n              Test Base\n            </button>\n          </div>\n        </div>\n        <div className=\" bg-white p-3 border rounded-border shadow-sm\">\n          <h5 className=\"text-center pt-2\">{baseHead}</h5>\n          <div className=\"row mx-3 my-2\">\n            {baseItems.map((item, i) => (\n              <PricingBox key={i} type=\"base\" item={item} />\n            ))}\n          </div>\n        </div>\n        <div className=\"mt-4 bg-white p-3 border rounded-border shadow-sm\">\n          <h5 className=\"text-center pt-2\">WEBSITE</h5>\n          <div className=\"row mx-3 my-2\">\n            {website_data.map((website, i) => (\n              <PricingBox key={i} type=\"website\" item={website} />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PricingTable from \"./pages/PricingTable\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <PricingTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}